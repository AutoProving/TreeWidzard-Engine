    Searching for a Counterexample:
        ./treewidzard -search [Width] [Flag Options] <search method> <property file>
        Random Setting:
        ./treewidzard -search [Width] [Flag Options] [-random <seed> <intro vertex probability> <forget vertex probability> <ping number>] <search method> <property file>

    [Width]: tw|pw = number
                example: tw = 2 (The program will search graphs with tree-width at most 2)
                example: pw = 2 (The program will search graphs with path-width at most 2)
    Flag Options:
        -pl         print loop
        -ps         print states
        -st         print state tree decomposition if a counterexample is found
        -pdbgn      print directed bipartite graph if a counterexample is found
        -no-bfs-dag disable creation of the bfs dag, to speed up the search
        -nthreads   number of threads to use in parallel

    Random Search Parameters:
         seed: The seed that initializes the random generator. This is an unsigned int.
         intro vertex probability: The probability of introducing a new vertex. This is a float between 0 and 1.
         forget vertex probability: The probability of forgetting a vertex. This is a float between 0 and 1.
         ping number: At each "ping number" times the program prints the number of iterations executed so far. This parameter only has an effect if the -pl flag is on.

    Parsing a Tree Decomposition:
        1- For PACE Format
            ./treewidzard -parse PACE [Flag Options] <property file> <graph file> <tree decomposition file>
        2- For ABSTRACT Decomposition Verify
            ./treewidzard -parse ABSTRACT [Flag Options] <property file> <abstract tree decomposition file>
     Flag Options:
            -pdbgn     print directed bipartite graph in NAUTY format
